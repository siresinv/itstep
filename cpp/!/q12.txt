// 3 - class method way
bool operator==(const Fract& f2) const {
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// Q1: // если без & - то видимо срабатывает конструктор копирования по-умолчанию
	// и данное условие правильно не отрабатывает
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	return (num*f2.denom == denom*f2.num);
}




// 2 - friend way
Fract& operator+(const Fract& f1, const Fract& f2) {
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// Q2: // здесь амперсанд во Fract& нужен видимо из-за того, что у объекта есть имя
	// но он все равно уничтожится после отрабатывания функции ???
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	Fract f3;
	f3.num = f1.num * f2.denom + f1.denom * f2.num;
	f3.denom = f1.denom * f2.denom;
	return f3;
} 




// 1 common way
Fract operator-(const Fract& f1, const Fract& f2) {
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// Q3: // здесь & не нужен видимо из-за того, что у объекта нет имени и ...
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	return Fract{ f1.getNum() * f2.getDenom() - f1.getDenom() * f2.getNum(), f1.getDenom() * f2.getDenom()};
}







Point& operator++() { //перегрузка префиксной формы
	++x;
	++y;
	return *this;
}


const Point operator++(int) { //перегрузка постфиксной формы //int - фиктивный параметр
	Point p{ *this };
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// Q4: копирующий конструктор по-умолчанию???
	// Зачем * - потому что копирующий конструктор принимает объект по ссылке
	// Зачем const???
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

	++(*this);
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// Q5: Зачем *
	//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	return p;
}